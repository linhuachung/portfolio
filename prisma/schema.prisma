// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  email  String  @unique
  name   String
  avatar String?
  bio    String?
  role   String  @default("user")

  socialLinks SocialLink[]
  projects    Project[]
  experiences Experience[]
  skills      UserSkill[]
  education   Education[]
  contacts    Contact[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  password String
  role     String @default("admin")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialLink {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type   String
  url    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  title       String
  description String
  category    String
  image       String?
  link        String?
  github      String?

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags ProjectTag[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ProjectTechStack ProjectTechStack[]
}

model ProjectTag {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  projectId String @db.ObjectId
  name      String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Experience {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  company        String
  position       String
  description    String
  startDate      DateTime
  endDate        DateTime?
  isCurrent      Boolean
  location       String
  companyLogo    String?
  companyWebsite String?

  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  techStack ExperienceTechStack[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechStack {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  experiences ExperienceTechStack[]
  projects    ProjectTechStack[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExperienceTechStack {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  experienceId String @db.ObjectId
  techStackId  String @db.ObjectId

  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  techStack  TechStack  @relation(fields: [techStackId], references: [id], onDelete: Cascade)
}

model ProjectTechStack {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String @db.ObjectId
  techStackId String @db.ObjectId

  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  techStack TechStack @relation(fields: [techStackId], references: [id], onDelete: Cascade)
}

model Education {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  school       String
  field        String
  startDate    DateTime
  endDate      DateTime?
  isCurrent    Boolean
  grade        String?
  achievements String?

  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  educationExperiences EducationExperiences[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EducationExperiences {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  file        String?
  educationId String  @db.ObjectId

  education Education @relation(fields: [educationId], references: [id], onDelete: Cascade)
  degrees   Degree[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Degree {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  file                  String?
  educationExperienceId String  @db.ObjectId

  educationExperience EducationExperiences @relation(fields: [educationExperienceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  category  String
  icon      String?
  UserSkill UserSkill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSkill {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  skillId String @db.ObjectId
  level   Int?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  name    String
  email   String
  message String
  status  String  @default("pending")
  reply   String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
